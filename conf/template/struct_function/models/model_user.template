# -*- coding: UTF-8 -*-
# <file_name>.py
# Copyright (C) 2018 Vladimir Roncevic <elektron.ronca@gmail.com>
#
# <project_name> is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# <project_name> is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.
#

import sys
import datetime

try:
    from app_server import app, db, bcrypt
    from app_server.models.model_base import Base
except ImportError as e:
    msg = "\n{0}\n{1}\n".format(__file__, e)
    sys.exit(msg)  # Force close python ATS ##################################

__author__ = "Vladimir Roncevic"
__copyright__ = "Copyright 2018, Free software to use and distributed it."
__credits__ = ["Vladimir Roncevic"]
__license__ = "GNU General Public License (GPL)"
__version__ = "1.0.0"
__maintainer__ = "Vladimir Roncevic"
__email__ = "elektron.ronca@gmail.com"
__status__ = "Updated"


class User(Base):
    """
        Define class User with attribute(s) and method(s).
        Model User for login operations.
        It defines:
            attribute:
                __tablename__ - DB table name
                fullname - First and last name
                username - User short username
                password - User password
                email - User contact email
                admin - Is user Administrator
            method:
                __init__ - Initial constructor
                get_id - Getting id
                __repr__ - Printable representation of the user
    """

    __tablename__ = "users"
    fullname = db.Column(db.String(255), unique=True, nullable=False)
    username = db.Column(db.String(255), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    email = db.Column(db.String(255), unique=True, nullable=False)
    admin = db.Column(db.Boolean, nullable=False, default=False)

    def __init__(self, fullname, username, password, email, admin=False):
        """
            Initial constructor.
            :param fullname: User fullname
            :type fullname: <str>
            :param username: User system name
            :type username: <str>
            :param password: User password
            :type password: <str>
            :param email: User contact email
            :type email: <str>
            :param admin: Marking user as Administrator
            :type admin: <bool>
        """
        self.fullname = fullname
        self.username = username
        self.password = bcrypt.generate_password_hash(
            password, app.config.get('BCRYPT_LOG_ROUNDS')
        )
        self.email = email
        self.modified = self.created = datetime.datetime.now()
        self.admin = admin

    def get_id(self):
        """
            Getting ID.
            :return: Getting id
            :rtype: int
        """
        return self.id

    def __repr__(self):
        """
            Printable representation of the user.
            :return: Printable representation of the user
            :rtype: str
        """
        return "<{0} {1} {2} {3} {4}>".format(
            self.__class__.__name__, self.fullname, self.username,
            self.email, self.admin
        )

